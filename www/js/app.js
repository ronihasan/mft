/*
 * Please see the included README.md file for license terms and conditions.
 */


// This file is a suggested starting place for your code.
// It is completely optional and not required.
// Note the reference that includes it in the index.html file.


/*jslint browser:true, devel:true, white:true, vars:true */
/*global $:false, intel:false app:false, dev:false, cordova:false */


// For improved debugging and maintenance of your app, it is highly
// recommended that you separate your JavaScript from your HTML files.
// Use the addEventListener() method to associate events with DOM elements.

// For example:

// var el ;
// el = document.getElementById("id_myButton") ;
// el.addEventListener("click", myEventHandler, false) ;



// The function below is an example of the best way to "start" your app.
// This example is calling the standard Cordova "hide splashscreen" function.
// You can add other code to it or add additional functions that are triggered
// by the same event or other events.

function onAppReady() {
    if( navigator.splashscreen && navigator.splashscreen.hide ) {   // Cordova API detected
        navigator.splashscreen.hide() ;
    }
}
document.addEventListener("app.Ready", onAppReady, false) ;
// document.addEventListener("deviceready", onAppReady, false) ;
// document.addEventListener("onload", onAppReady, false) ;

// The app.Ready event shown above is generated by the init-dev.js file; it
// unifies a variety of common "ready" events. See the init-dev.js file for
// more details. You can use a different event to start your app, instead of
// this event. A few examples are shown in the sample code above. If you are
// using Cordova plugins you need to either use this app.Ready event or the
// standard Crordova deviceready event. Others will either not work or will
// work poorly.

// NOTE: change "dev.LOG" in "init-dev.js" to "true" to enable some console.log
// messages that can help you debug Cordova app initialization issues.


//If mobile is not in online mode
document.addEventListener("app.Ready", function(){
    function isOnline(no,yes){
        //var xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHttp');
        var xhr = new XMLHttpRequest();
        xhr.onload = function(){
            if(yes instanceof Function){
                yes();
            }
        };
        xhr.onerror = function(){
            if(no instanceof Function){
                no();
            }
        };
        //$.getJSON('configs.json', function(confs){
            xhr.open("GET","http://www.mft.gomyitguy.com/admin.php/users/mft_valid_user",true);   //for test internet, need same host address and active path
            xhr.send();
        //});
    }

    /*
    isOnline(
        function(){
            //console.log('You are offline now.');
            //alert('You are offline now.');
            if($('body').find('#offlineNav').html() === undefined || $('body').find('#offlineNav').html() === null){
                var html = '<div id="offlineNav" class="offline"><div class="offline-content"><img src="template/images/logo_64.png" style="margin:10px;" alt="Loading ..." /><br />';
                html += '<a href="javascript:void();">You are offline now.</a></div></div>';
                $('body').append(html);
                document.getElementById("offlineNav").style.height = "100%";
            }else{
                document.getElementById("offlineNav").style.height = "100%";
            }
        },
        function(){
            //console.log("Succesfully connected!");
            //alert("Succesfully connected!");
        }
    );
    */
}, true);


/*
//goes offline
window.addEventListener('offline', function(e) { 
    //alert('You are going offline now.');
    //console.log('You are offline now.');
    if($('body').find('#offlineNav').html() === undefined || $('body').find('#offlineNav').html() === null){
        //alert('OFF1');
        var html = '<div id="offlineNav" class="offline"><div class="offline-content"><img src="template/images/logo_64.png" style="margin:10px;" alt="Loading ..." /><br />';
        html += '<a href="javascript:void();">You are offline now.</a></div></div>';
        $('body').append(html);
        //document.getElementsByTagName("body").innerHTML = html;
        document.getElementById("offlineNav").style.height = "100%";
    }else{
        //alert('OFF2');
        document.getElementById("offlineNav").style.height = "100%";
    }
});
//goes online
window.addEventListener('online', function(e) { 
    //alert('ON');
    if($('body').find('#offlineNav').html() !== undefined && $('body').find('#offlineNav').html() !== null){
        document.getElementById("offlineNav").style.height = "0%";
    }
});
*/


//user auth
function userAuth(){
    // Getting value
    var sess_data = JSON.parse(localStorage.getItem('sess_data'));
    //console.log(sess_data);
    var user = JSON.parse(localStorage.getItem('user'));
    //console.log(user);
    var current_url = window.location.pathname.split("/").pop();
    //console.log(current_url);
    var anonURLs = ['login.html', 'login_form.html', 'signup.html'];
    
    if(sess_data === null || sess_data === undefined){
        // Setting value
        localStorage.setItem('user', null);
        localStorage.setItem('sess_data', null);
        
        if(anonURLs.indexOf(current_url) !== -1){
            
        }else{
            window.location.href = 'login.html';
        }
    }
    
    if(user === null || user === undefined){
        // Setting value
        localStorage.setItem('user', null);
        localStorage.setItem('sess_data', null);
        
        if(anonURLs.indexOf(current_url) !== -1){
            
        }else{
            window.location.href = 'login.html';
        }
    }
      
    //console.log(current_url + anonURLs.indexOf(current_url));
    if(anonURLs.indexOf(current_url) === -1){
        /*
        $.getJSON('configs.json', function(confs){
            $.ajax({
                 url: 'http://' + confs.site_addr + '/admin.php/users/mft_valid_user?ma=1&sessN=' + sess_data.session_id + '&ua=' + sess_data.user_agent,
                 method: 'post',
                 data: {auth_id: user.auth_id, auth_type: '2'},
                 dataType: 'json',
                 success:function(vals){
                     if(vals.valid_user_status === '1'){
                        // Setting value
                        localStorage.setItem('user', JSON.stringify(vals.user_data));
                        // Setting value
                        localStorage.setItem('sess_data', JSON.stringify(vals.login_session));
                     }else{
                         console.log(vals);
                        if (vals.flash_data !== undefined && vals.flash_data !== null) {
                            if (vals.flash_data.msg !== undefined && vals.flash_data.msg !== null) {
                                $("body").cftoaster({content: vals.flash_data.msg});
                            }else{
                                $("body").cftoaster({content: 'Something error happened. We are trying hard to solve it. Please login again.'});
                            }
                        }else{
                            $("body").cftoaster({content: 'Your session was closed. Try to login again.'});
                        }
                        setTimeout(function () {
                            // Setting value
                            localStorage.setItem('user', null);
                            localStorage.setItem('sess_data', null);
                            window.location.href = 'login.html';
                        }, 2000);
                     }
                 }
            });
        });
        */
    }
}

document.addEventListener("app.Ready", userAuth, false) ;

/*One UI Signal*/

// Add to index.js or the first page that loads with your app.
// For Intel XDK and please add this to your app.js.

document.addEventListener('deviceready', function () {
  // Enable to debug issues.
  // window.plugins.OneSignal.setLogLevel({logLevel: 4, visualLevel: 4});
  
  /*
  var notificationOpenedCallback = function(jsonData) {
    console.log('notificationOpenedCallback: ' + JSON.stringify(jsonData));
  };

  window.plugins.OneSignal
    .startInit("ec2c92f6-4add-4f05-92bd-c9865eeecc08")
    .handleNotificationOpened(notificationOpenedCallback)
    .endInit();
  */
  
  // Call syncHashedEmail anywhere in your app if you have the user's email.
  // This improves the effectiveness of OneSignal's "best-time" notification scheduling feature.
  // window.plugins.OneSignal.syncHashedEmail(userEmail);
}, false);
